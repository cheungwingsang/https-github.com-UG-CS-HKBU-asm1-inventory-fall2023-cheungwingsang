{\rtf1\ansi\ansicpg950\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww17180\viewh12000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # README - iOS App Development Assignment using SwiftUI\
\
This README file provides detailed instructions on setting up, assumptions, and limitations for the iOS application developed as part of the iOS App Development Assignment using SwiftUI.\
\
## Introduction\
The task is to develop a three-tab iOS application using SwiftUI that follows best practices for iOS app development. The application should have the following features:\
\
1. Tab 1: Item Types\
   - Display four types: Games, Gifts, Materials, and Books using a list view or other UI component.\
   - Clicking on each type should navigate to another list view that shows all the items returned by an API endpoint.\
   - The API endpoint initially returns only 10 items. Implement pagination links or infinite scrolling to retrieve and display more items.\
   - Clicking on each item in the list should navigate to the detail page, where logged-in users can borrow, return, or consume items.\
\
2. Tab 2: Search\
   - Include a search box where the user can enter a keyword.\
   - Make an API call to retrieve and display the search result in a list view.\
   - Clicking on each item in the list should navigate to the detail page, similar to Tab 1.\
\
3. Tab 3: User Login\
   - Allow users to log in.\
   - Users can view a list of their borrowed and consumed items.\
   - Clicking on an item in the list should navigate to the detail page, which allows the user to return borrowed items.\
\
## API Endpoints\
Base URL: \
- For cubci server: https://cubci.azurewebsites.net/\
- For comp4107 server: https://comp4107.azurewebsites.net/\
\
API Documentation:\
- For cubci server: https://cubci.azurewebsites.net/api-docs/\
- For comp4107 server: https://comp4107.azurewebsites.net/api-docs/\
\
User details endpoint:\
- For cubci server: https://cubci.azurewebsites.net/user/\
- For comp4107 server: https://comp4107.azurewebsites.net/user/\
\
Password for all users: "123456"\
\
Note: The cubci server is expected to be faster than the comp4107 server.\
\
## Setup Instructions\
\
1. Clone the repository\
   - Use the following GitHub Classroom link to access the source code: [GitHub Classroom Repository](https://classroom.github.com/a/ID20YioB)\
   - Clone the repository to your local machine using a Git client or the command line:\
   \
     git clone https://github.com/cheungwingsang/Assignment1.git\
 \
\
2. Open the project in Xcode\
   - Launch Xcode onhttps://github.com/cheungwingsang/Assignment1.git your macOS system.\
   - Open the project by navigating to the cloned repository location and selecting the project file (with the `.xcodeproj` extension).\
\
3. Configure the project\
   - Ensure that you have the latest version of Xcode installed on your system.\
   - Make sure the project is set to the correct target iOS version and device simulator.\
\
4. Build and run the application\
   - Select the desired device simulator from the Xcode toolbar.\
   - Click on the "Build and Run" button (play button) in the Xcode toolbar or use the `Cmd+R` shortcut to build and run the application.\
\
5. Test the application\
   - Explore the different tabs and functionalities of the application.\
   - Verify that the API endpoints are working as expected and returning the appropriate data.\
   - Test the login functionality and view the borrowed and consumed items for a user.\
\
## Assumptions\
- The application assumes that the user has a basic understanding of iOS app development and SwiftUI.\
- The API endpoints provided in the assignment description are accessible and return the expected data.\
- The user details endpoint is used to retrieve the user's borrowed and consumed items.\
- The password for all users is set to "123456".\
\
## Limitations\
- The application does not handle network connectivity issues. It assumes a stable internet connection is available.\
- Error handling and validation of API responses are implemented to some extent, but there may be cases where certain errors are not handled gracefully.\
---
The user's borrowing, returning or consumption part has not been completed
It cannot display borrowed and consumed items in list view format.

\
\
## Video Demonstration\
https://youtu.be/SCUkuz6jzas\
}
